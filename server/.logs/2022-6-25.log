[2022-6-25 4:30:35] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:30:35] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:30:35] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:30:35] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:30:35] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:30:54] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:30:54] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:30:54] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:30:54] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:30:54] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:31:2] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:31:2] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:31:2] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:31:2] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:31:2] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:33:15] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:33:15] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:33:15] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:33:15] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:33:15] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:33:15] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:34:3] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:34:3] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:34:3] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:34:3] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:34:3] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:34:3] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:41:39] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:41:39] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:41:39] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:41:39] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:41:39] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:41:39] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:44:36] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:44:36] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:44:36] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:44:36] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:44:36] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:44:36] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:45:33] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:45:33] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:45:33] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:45:33] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:45:33] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:45:33] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:48:34] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:48:34] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:48:34] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:48:34] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:48:34] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:48:34] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] New user logged existingadmin@test.com
[2022-6-25 4:48:34] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 4:48:34] [INFO] Email is existingadmin@test.com
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] comparing password now!
[2022-6-25 4:48:34] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 4:48:34] [INFO] Here in the login controller #2!
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 4:48:34] [INFO] New user logged existingadmin@test.com
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 4:48:34] [INFO] Email is existingadmin@test.com
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 4:48:34] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] comparing password now!
[2022-6-25 4:48:34] [INFO] Here in the login controller #2!
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 4:48:34] [INFO] Email is existingadmin@test.com
[2022-6-25 4:48:34] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 4:48:34] [INFO] New user logged existingadmin@test.com
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] Here in the login controller #2!
[2022-6-25 4:48:34] [INFO] comparing password now!
[2022-6-25 4:48:34] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:48:34] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 4:48:34] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:54:22] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:54:22] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:54:22] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:54:22] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:54:22] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:54:22] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:54:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 4:54:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:54:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 4:54:22] [INFO] Email is existingadmin@test.com
[2022-6-25 4:54:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 4:54:22] [INFO] New user logged existingadmin@test.com
[2022-6-25 4:54:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:54:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 4:54:22] [INFO] comparing password now!
[2022-6-25 4:54:22] [INFO] Here in the login controller #2!
[2022-6-25 4:54:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 4:54:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:54:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 4:54:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:54:22] [INFO] New user logged existingadmin@test.com
[2022-6-25 4:54:22] [INFO] Email is existingadmin@test.com
[2022-6-25 4:54:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 4:54:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 4:54:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 4:54:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 4:54:22] [INFO] comparing password now!
[2022-6-25 4:54:22] [INFO] Here in the login controller #2!
[2022-6-25 4:56:22] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:56:22] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:56:22] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 4:56:22] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:56:22] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:56:22] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:56:49] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 4:56:49] [INFO] Booting the 'CORS' middleware...
[2022-6-25 4:56:49] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 4:56:49] [INFO] Booting the 'Views' middleware...
[2022-6-25 4:56:49] [INFO] Booting the 'Statics' middleware...
[2022-6-25 4:56:49] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:13:13] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:13:13] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:13:13] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:13:13] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:13:13] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:13:13] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:13:41] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:13:41] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:13:41] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:13:41] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:13:41] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:13:41] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:14:49] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:14:49] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:14:49] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:14:49] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:14:49] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:14:49] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:14:49] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:14:49] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:14:49] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:14:49] [INFO] Email is existingadmin@test.com
[2022-6-25 5:14:49] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:14:49] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:14:49] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:14:49] [INFO] comparing password now!
[2022-6-25 5:14:49] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:14:49] [INFO] Here in the login controller #2!
[2022-6-25 5:15:51] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:15:51] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:15:51] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:15:51] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:15:51] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:15:51] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:15:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:15:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:15:51] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:15:51] [INFO] Email is existingadmin@test.com
[2022-6-25 5:15:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:15:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:15:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:15:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:15:51] [INFO] comparing password now!
[2022-6-25 5:15:51] [INFO] Here in the login controller #2!
[2022-6-25 5:15:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:15:51] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:15:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:15:51] [INFO] Email is existingadmin@test.com
[2022-6-25 5:15:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:15:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:15:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:15:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:15:51] [INFO] comparing password now!
[2022-6-25 5:15:51] [INFO] Here in the login controller #2!
[2022-6-25 5:22:20] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:22:20] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:22:20] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:22:20] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:22:20] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:22:20] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:22:20] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:22:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:22:20] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:22:20] [INFO] Email is existingadmin@test.com
[2022-6-25 5:22:20] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:22:20] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:22:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:22:20] [INFO] comparing password now!
[2022-6-25 5:22:20] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:22:20] [INFO] Here in the login controller #2!
[2022-6-25 5:22:20] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:22:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:22:20] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:22:20] [INFO] Email is existingadmin@test.com
[2022-6-25 5:22:20] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:22:20] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:22:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:22:20] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:22:20] [INFO] comparing password now!
[2022-6-25 5:22:20] [INFO] Here in the login controller #2!
[2022-6-25 5:45:54] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:45:54] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:45:54] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:45:54] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:45:54] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:45:54] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:46:4] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:46:4] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:46:4] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:46:4] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:46:4] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:46:4] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:46:18] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:46:18] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:18] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:46:18] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:46:18] [INFO] Email is existingadmin@test.com
[2022-6-25 5:46:18] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:46:18] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:18] [INFO] comparing password now!
[2022-6-25 5:46:18] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:46:18] [INFO] Here in the login controller #2!
[2022-6-25 5:46:18] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:46:18] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:54] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:46:54] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:46:54] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:46:54] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:46:54] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:46:54] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:46:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:46:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:54] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:46:54] [INFO] Email is existingadmin@test.com
[2022-6-25 5:46:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:46:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:46:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:54] [INFO] comparing password now!
[2022-6-25 5:46:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:46:54] [INFO] Here in the login controller #2!
[2022-6-25 5:46:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:46:54] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:46:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:46:54] [INFO] Email is existingadmin@test.com
[2022-6-25 5:46:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:46:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:46:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:46:54] [INFO] comparing password now!
[2022-6-25 5:46:54] [INFO] Here in the login controller #2!
[2022-6-25 5:49:22] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 5:49:22] [INFO] Booting the 'CORS' middleware...
[2022-6-25 5:49:22] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 5:49:22] [INFO] Booting the 'Views' middleware...
[2022-6-25 5:49:22] [INFO] Booting the 'Statics' middleware...
[2022-6-25 5:49:22] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:49:22] [INFO] Email is existingadmin@test.com
[2022-6-25 5:49:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:49:22] [INFO] comparing password now!
[2022-6-25 5:49:22] [INFO] Here in the login controller #2!
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] New user logged existingadmin@test.com
[2022-6-25 5:49:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 5:49:22] [INFO] Email is existingadmin@test.com
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] Here in the login controller #2!
[2022-6-25 5:49:22] [INFO] comparing password now!
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 5:49:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 5:49:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] Booting the 'HTTP' middleware...
[2022-6-25 6:20:43] [INFO] Booting the 'CORS' middleware...
[2022-6-25 6:20:43] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-25 6:20:43] [INFO] Booting the 'Views' middleware...
[2022-6-25 6:20:43] [INFO] Booting the 'Statics' middleware...
[2022-6-25 6:20:43] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] New user logged existingadmin@test.com
[2022-6-25 6:20:43] [INFO] Email is existingadmin@test.com
[2022-6-25 6:20:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-25 6:20:43] [INFO] comparing password now!
[2022-6-25 6:20:43] [INFO] Here in the login controller #2!
[2022-6-25 6:20:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-25 6:20:43] [INFO] sqlToDB(): SELECT | 1
