[2022-6-19 10:2:35] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:2:35] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:2:35] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:2:35] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:2:35] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:3:23] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:3:23] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:3:23] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:3:23] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:3:23] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:21:49] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:21:49] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:21:49] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:21:49] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:21:49] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:22:50] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:22:50] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:22:50] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:22:50] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:22:50] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:23:19] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:23:19] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:23:19] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:23:19] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:23:19] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:24:3] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:24:3] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:24:3] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:24:3] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:24:3] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:37:26] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:37:26] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:37:26] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:37:26] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:37:26] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:37:26] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 10:37:26] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:37:26] [INFO] New user logged existingadmin@test.com
[2022-6-19 10:37:26] [INFO] Email is existingadmin@test.com
[2022-6-19 10:37:26] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 10:37:26] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 10:37:26] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:37:26] [INFO] comparing password now!
[2022-6-19 10:37:26] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 10:37:26] [INFO] Here in the login controller #2!
[2022-6-19 10:37:26] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:37:26] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:47:47] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:47:47] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:47:47] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:47:47] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:47:47] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:48:14] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:48:14] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:48:14] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:48:14] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:48:14] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:14] [INFO] New user logged existingadmin@test.com
[2022-6-19 10:48:14] [INFO] Email is existingadmin@test.com
[2022-6-19 10:48:14] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:14] [INFO] comparing password now!
[2022-6-19 10:48:14] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 10:48:14] [INFO] Here in the login controller #2!
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:14] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:48:14] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:48:43] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:48:43] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:48:43] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:48:43] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:48:43] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:54:9] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:54:9] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:54:9] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:54:9] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:54:9] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:54:30] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:54:30] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:54:30] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:54:30] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:54:30] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:54:40] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 10:54:40] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 10:54:40] [INFO] Booting the 'Views' middleware...
[2022-6-19 10:54:40] [INFO] Booting the 'Statics' middleware...
[2022-6-19 10:54:40] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 10:54:40] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 10:54:40] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:54:40] [INFO] New user logged existingadmin@test.com
[2022-6-19 10:54:40] [INFO] Email is existingadmin@test.com
[2022-6-19 10:54:40] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 10:54:40] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 10:54:40] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 10:54:40] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 10:54:40] [INFO] comparing password now!
[2022-6-19 10:54:40] [INFO] Here in the login controller #2!
[2022-6-19 10:54:40] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 10:54:40] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:3:12] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:3:12] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:3:12] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:3:12] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:3:12] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:3:12] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:3:12] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:3:12] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:3:12] [INFO] Email is existingadmin@test.com
[2022-6-19 11:3:12] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:3:12] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:3:12] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:3:12] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:3:12] [INFO] comparing password now!
[2022-6-19 11:3:12] [INFO] Here in the login controller #2!
[2022-6-19 11:3:38] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:3:38] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:3:38] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:3:38] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:3:38] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:3:58] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:3:58] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:3:58] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:3:58] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:3:58] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:7:9] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:7:9] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:7:9] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:7:9] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:7:9] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:7:9] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:7:9] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:7:9] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:7:9] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:7:9] [INFO] Email is existingadmin@test.com
[2022-6-19 11:7:9] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:7:9] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:7:9] [INFO] comparing password now!
[2022-6-19 11:7:9] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:7:9] [INFO] Here in the login controller #2!
[2022-6-19 11:8:47] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:8:47] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:8:47] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:8:47] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:8:47] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:8:47] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:8:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:8:47] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:8:47] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:8:47] [INFO] Email is existingadmin@test.com
[2022-6-19 11:8:47] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:8:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:8:47] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:8:47] [INFO] comparing password now!
[2022-6-19 11:8:47] [INFO] Here in the login controller #2!
[2022-6-19 11:8:47] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:8:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:9:29] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:9:29] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:9:29] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:9:29] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:9:29] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:13:46] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:13:46] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:13:46] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:13:46] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:13:46] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:21:14] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:21:14] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:21:14] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:21:14] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:21:14] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:22:14] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:22:14] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:22:14] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:22:14] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:22:14] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:22:40] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:22:40] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:22:40] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:22:40] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:22:40] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:23:34] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:23:34] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:23:34] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:23:34] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:23:34] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:23:52] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:23:52] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:23:52] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:23:52] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:23:52] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:24:33] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:24:33] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:24:33] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:24:33] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:24:33] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:26:56] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:26:56] [INFO] Email is existingadmin@test.com
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:26:56] [INFO] comparing password now!
[2022-6-19 11:26:56] [INFO] Here in the login controller #2!
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:26:56] [INFO] Email is existingadmin@test.com
[2022-6-19 11:26:56] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:26:56] [INFO] comparing password now!
[2022-6-19 11:26:56] [INFO] Here in the login controller #2!
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:58] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:26:58] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:58] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:26:58] [INFO] Email is existingadmin@test.com
[2022-6-19 11:26:58] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:26:58] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:26:58] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:58] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:26:58] [INFO] comparing password now!
[2022-6-19 11:26:58] [INFO] Here in the login controller #2!
[2022-6-19 11:26:58] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:26:58] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:26:59] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:26:56] [INFO] Email is existingadmin@test.com
[2022-6-19 11:26:56] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:56] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:26:56] [INFO] comparing password now!
[2022-6-19 11:26:56] [INFO] Here in the login controller #2!
[2022-6-19 11:26:56] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:26:59] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:59] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:26:59] [INFO] Email is existingadmin@test.com
[2022-6-19 11:26:59] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:26:59] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:26:59] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:26:59] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:26:59] [INFO] comparing password now!
[2022-6-19 11:26:59] [INFO] Here in the login controller #2!
[2022-6-19 11:26:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:31:51] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:31:51] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:31:51] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:31:51] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:31:51] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:32:37] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:32:37] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:32:37] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:32:37] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:32:37] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:32:43] [INFO] Email is existingadmin@test.com
[2022-6-19 11:32:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:32:43] [INFO] comparing password now!
[2022-6-19 11:32:43] [INFO] Here in the login controller #2!
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:32:43] [INFO] Email is existingadmin@test.com
[2022-6-19 11:32:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:32:43] [INFO] comparing password now!
[2022-6-19 11:32:43] [INFO] Here in the login controller #2!
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:32:43] [INFO] Email is existingadmin@test.com
[2022-6-19 11:32:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:32:43] [INFO] comparing password now!
[2022-6-19 11:32:43] [INFO] Here in the login controller #2!
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] Email is existingadmin@test.com
[2022-6-19 11:32:43] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:32:43] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:43] [INFO] comparing password now!
[2022-6-19 11:32:43] [INFO] Here in the login controller #2!
[2022-6-19 11:32:43] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:32:43] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:45] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:45] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:32:45] [INFO] Email is existingadmin@test.com
[2022-6-19 11:32:45] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:32:45] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:45] [INFO] comparing password now!
[2022-6-19 11:32:45] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:32:45] [INFO] Here in the login controller #2!
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:32:45] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:44] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:39:44] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:39:44] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:39:44] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:39:44] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Email is existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:39:48] [INFO] comparing password now!
[2022-6-19 11:39:48] [INFO] Here in the login controller #2!
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Email is existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:39:48] [INFO] comparing password now!
[2022-6-19 11:39:48] [INFO] Here in the login controller #2!
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Email is existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:39:48] [INFO] comparing password now!
[2022-6-19 11:39:48] [INFO] Here in the login controller #2!
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] Email is existingadmin@test.com
[2022-6-19 11:39:48] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:39:48] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:48] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:39:48] [INFO] Here in the login controller #2!
[2022-6-19 11:39:48] [INFO] comparing password now!
[2022-6-19 11:39:48] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:39:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:39:50] [INFO] Email is existingadmin@test.com
[2022-6-19 11:39:50] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:39:50] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:39:50] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:39:50] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:39:50] [INFO] comparing password now!
[2022-6-19 11:39:50] [INFO] Here in the login controller #2!
[2022-6-19 11:40:16] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:40:16] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:40:16] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:40:16] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:40:16] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:40:20] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:20] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:20] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:20] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:20] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:20] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:20] [INFO] comparing password now!
[2022-6-19 11:40:20] [INFO] Here in the login controller #2!
[2022-6-19 11:40:20] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:40:21] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:21] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:21] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:21] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:21] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:21] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:21] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:21] [INFO] comparing password now!
[2022-6-19 11:40:21] [INFO] Here in the login controller #2!
[2022-6-19 11:40:21] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:21] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:20] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:20] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:20] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:20] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:20] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:20] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:20] [INFO] comparing password now!
[2022-6-19 11:40:20] [INFO] Here in the login controller #2!
[2022-6-19 11:40:20] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:40:20] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:21] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:21] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:21] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:21] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:21] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:21] [INFO] comparing password now!
[2022-6-19 11:40:21] [INFO] Here in the login controller #2!
[2022-6-19 11:40:21] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:40:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:24] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:24] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:24] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:24] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:24] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:24] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:24] [INFO] comparing password now!
[2022-6-19 11:40:24] [INFO] Here in the login controller #2!
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:52] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:40:52] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:40:52] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:40:52] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:40:52] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] comparing password now!
[2022-6-19 11:40:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:54] [INFO] Here in the login controller #2!
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:54] [INFO] comparing password now!
[2022-6-19 11:40:54] [INFO] Here in the login controller #2!
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:54] [INFO] comparing password now!
[2022-6-19 11:40:54] [INFO] Here in the login controller #2!
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:54] [INFO] comparing password now!
[2022-6-19 11:40:54] [INFO] Here in the login controller #2!
[2022-6-19 11:40:54] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:40:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:56] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:40:57] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:40:57] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:57] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:40:57] [INFO] Email is existingadmin@test.com
[2022-6-19 11:40:57] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:40:57] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:40:57] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:40:57] [INFO] comparing password now!
[2022-6-19 11:40:57] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:40:57] [INFO] Here in the login controller #2!
[2022-6-19 11:41:33] [INFO] Booting the 'HTTP' middleware...
[2022-6-19 11:41:33] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-19 11:41:33] [INFO] Booting the 'Views' middleware...
[2022-6-19 11:41:33] [INFO] Booting the 'Statics' middleware...
[2022-6-19 11:41:33] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Email is existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] comparing password now!
[2022-6-19 11:41:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:41:51] [INFO] Here in the login controller #2!
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Email is existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:41:51] [INFO] comparing password now!
[2022-6-19 11:41:51] [INFO] Here in the login controller #2!
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Email is existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:41:51] [INFO] comparing password now!
[2022-6-19 11:41:51] [INFO] Here in the login controller #2!
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:53] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:41:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] Email is existingadmin@test.com
[2022-6-19 11:41:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:41:51] [INFO] Here in the login controller #2!
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:51] [INFO] comparing password now!
[2022-6-19 11:41:51] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-19 11:41:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:53] [INFO] New user logged existingadmin@test.com
[2022-6-19 11:41:53] [INFO] Email is existingadmin@test.com
[2022-6-19 11:41:53] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-19 11:41:53] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:53] [INFO] user is existingadmin@test.com                                                                              
[2022-6-19 11:41:53] [INFO] comparing password now!
[2022-6-19 11:41:53] [INFO] Here in the login controller #2!
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:53] [INFO] sqlToDB(): SELECT | 1
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
[2022-6-19 11:41:33] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-19 11:41:33] [INFO] sqlToDB(): SELECT | 0
