[2022-6-21 20:3:46] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:3:46] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:3:46] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:3:46] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:3:46] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:3:55] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:3:55] [INFO] Email is existingadmin@test.com
[2022-6-21 20:3:55] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:3:55] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:3:55] [INFO] comparing password now!
[2022-6-21 20:3:55] [INFO] Here in the login controller #2!
[2022-6-21 20:3:55] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:3:55] [INFO] Email is existingadmin@test.com
[2022-6-21 20:3:55] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:3:55] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:3:55] [INFO] comparing password now!
[2022-6-21 20:3:55] [INFO] Here in the login controller #2!
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:3:55] [INFO] Email is existingadmin@test.com
[2022-6-21 20:3:55] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:3:55] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:3:55] [INFO] comparing password now!
[2022-6-21 20:3:55] [INFO] Here in the login controller #2!
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:55] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:58] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:58] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:58] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:58] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:3:58] [INFO] Email is existingadmin@test.com
[2022-6-21 20:3:58] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:3:58] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:3:58] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:58] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:3:58] [INFO] comparing password now!
[2022-6-21 20:3:58] [INFO] Here in the login controller #2!
[2022-6-21 20:3:58] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:58] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:3:58] [INFO] Email is existingadmin@test.com
[2022-6-21 20:3:58] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:3:58] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:3:58] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:58] [INFO] comparing password now!
[2022-6-21 20:3:58] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:3:58] [INFO] Here in the login controller #2!
[2022-6-21 20:3:58] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:58] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:46] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:46] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:46] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:46] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:3:46] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:3:46] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:3:46] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:46] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:3:46] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:3:46] [INFO] Email is existingadmin@test.com
[2022-6-21 20:3:46] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:3:46] [INFO] comparing password now!
[2022-6-21 20:3:46] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:3:46] [INFO] Here in the login controller #2!
[2022-6-21 20:10:58] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:10:58] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:10:58] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:10:58] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:10:58] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:12:56] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:12:56] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:12:56] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:12:56] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:12:56] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:14:2] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:14:2] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:14:2] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:14:2] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:14:2] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:15:5] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:15:5] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:15:5] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:15:5] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:15:5] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:15:21] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:21] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:21] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:21] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:21] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:21] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:21] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:21] [INFO] comparing password now!
[2022-6-21 20:15:21] [INFO] Here in the login controller #2!
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:22] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:22] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:22] [INFO] comparing password now!
[2022-6-21 20:15:22] [INFO] Here in the login controller #2!
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:21] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:21] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:22] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:22] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:22] [INFO] comparing password now!
[2022-6-21 20:15:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:22] [INFO] Here in the login controller #2!
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:24] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:22] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:22] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:22] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:22] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:22] [INFO] comparing password now!
[2022-6-21 20:15:22] [INFO] Here in the login controller #2!
[2022-6-21 20:15:22] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:15:22] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:24] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:24] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:24] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:24] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:24] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:24] [INFO] comparing password now!
[2022-6-21 20:15:24] [INFO] Here in the login controller #2!
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:15:24] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:54] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:54] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:54] [INFO] comparing password now!
[2022-6-21 20:15:54] [INFO] Here in the login controller #2!
[2022-6-21 20:15:54] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:15:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:54] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:54] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:54] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:54] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:54] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:54] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:54] [INFO] comparing password now!
[2022-6-21 20:15:54] [INFO] Here in the login controller #2!
[2022-6-21 20:15:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:54] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:15:54] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:5] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:15:5] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:5] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:15:5] [INFO] Email is existingadmin@test.com
[2022-6-21 20:15:5] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:15:5] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:15:5] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:15:5] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:15:5] [INFO] comparing password now!
[2022-6-21 20:15:5] [INFO] Here in the login controller #2!
[2022-6-21 20:15:5] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:15:5] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:22:34] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:22:34] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:22:34] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:22:34] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:22:34] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:26:51] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:26:51] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:26:51] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:26:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:26:51] [INFO] Email is existingadmin@test.com
[2022-6-21 20:26:51] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:26:51] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:26:51] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:26:51] [INFO] comparing password now!
[2022-6-21 20:26:51] [INFO] Here in the login controller #2!
[2022-6-21 20:28:1] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:28:1] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:28:1] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:28:1] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:28:1] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:28:3] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:28:3] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:28:3] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:28:3] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:28:3] [INFO] Email is existingadmin@test.com
[2022-6-21 20:28:3] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:28:3] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:28:3] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:28:3] [INFO] comparing password now!
[2022-6-21 20:28:3] [INFO] Here in the login controller #2!
[2022-6-21 20:28:52] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:28:52] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:28:52] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:28:52] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:28:52] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:31:35] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:31:35] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:31:35] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:31:35] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:31:35] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:31:37] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:31:37] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:31:37] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:31:37] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:31:37] [INFO] Email is existingadmin@test.com
[2022-6-21 20:31:37] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:31:37] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:31:37] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:31:37] [INFO] comparing password now!
[2022-6-21 20:31:37] [INFO] Here in the login controller #2!
[2022-6-21 20:32:34] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:32:34] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:32:34] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:32:34] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:32:34] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:32:47] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 20:32:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:32:47] [INFO] New user logged existingadmin@test.com
[2022-6-21 20:32:47] [INFO] Email is existingadmin@test.com
[2022-6-21 20:32:47] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 20:32:47] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 20:32:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:32:47] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 20:32:47] [INFO] comparing password now!
[2022-6-21 20:32:47] [INFO] Here in the login controller #2!
[2022-6-21 20:32:47] [INFO] sqlToDB() name: fetch-user-by-id | sql: select * from public.users where id = $1 | data: undefined
[2022-6-21 20:32:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:36:48] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:38:58] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:38:58] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:38:58] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:38:58] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:38:58] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:39:29] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:44:24] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:44:24] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:44:24] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:44:24] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:44:24] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:44:45] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:44:45] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:44:45] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:44:45] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:44:45] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:46:39] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:46:39] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:46:39] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:46:39] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:46:39] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:46:55] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:46:55] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:46:55] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:46:55] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:46:55] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:55:19] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:55:19] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:55:19] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:55:19] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:55:19] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:55:27] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:55:27] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:55:27] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:55:27] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:55:27] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:55:39] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:56:48] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 20:56:48] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 20:56:48] [INFO] Booting the 'Views' middleware...
[2022-6-21 20:56:48] [INFO] Booting the 'Statics' middleware...
[2022-6-21 20:56:48] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-email-exist | sql: SELECT email FROM public.users where email = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-phoneNumber-exist | sql: SELECT phone_number FROM public.users where phone_number = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB() name: verify-userName-exist | sql: SELECT user_name FROM public.users where user_name = $1 | data: undefined
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 20:56:52] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 21:0:11] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 21:0:11] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 21:0:11] [INFO] Booting the 'Views' middleware...
[2022-6-21 21:0:11] [INFO] Booting the 'Statics' middleware...
[2022-6-21 21:0:11] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 21:0:41] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 21:0:41] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 21:0:41] [INFO] New user logged existingadmin@test.com
[2022-6-21 21:0:41] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 21:0:41] [INFO] Email is existingadmin@test.com
[2022-6-21 21:0:41] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 21:0:41] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 21:0:41] [INFO] comparing password now!
[2022-6-21 21:0:41] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 21:0:41] [INFO] Here in the login controller #2!
[2022-6-21 21:0:41] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 21:0:41] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 21:1:44] [INFO] Booting the 'HTTP' middleware...
[2022-6-21 21:1:44] [INFO] Booting the 'CsrfToken' middleware...
[2022-6-21 21:1:44] [INFO] Booting the 'Views' middleware...
[2022-6-21 21:1:44] [INFO] Booting the 'Statics' middleware...
[2022-6-21 21:1:44] [INFO] Booting the 'StatusMonitor' middleware...
[2022-6-21 21:1:47] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 21:1:47] [INFO] New user logged existingadmin@test.com
[2022-6-21 21:1:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 21:1:47] [INFO] Email is existingadmin@test.com
[2022-6-21 21:1:47] [INFO] Password is 78ca89fb969778e1044c06659fb077bdb4b77d1d6b0c0466e53233d73361a280
[2022-6-21 21:1:47] [INFO] sqlToDB() name: fetch-user-by-email | sql: select * from public.users where email = $1 | data: undefined
[2022-6-21 21:1:47] [INFO] sqlToDB(): SELECT | 1
[2022-6-21 21:1:47] [INFO] user is existingadmin@test.com                                                                              
[2022-6-21 21:1:47] [INFO] comparing password now!
[2022-6-21 21:1:47] [INFO] Here in the login controller #2!
[2022-6-21 21:1:47] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 21:1:47] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 21:1:44] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 21:1:44] [INFO] sqlToDB(): SELECT | 0
[2022-6-21 21:1:44] [INFO] sqlToDB() name: fetch-user-by-mail-password | sql: select * from public.users where email = $1 and user_password = $2 | data: undefined
[2022-6-21 21:1:44] [INFO] sqlToDB(): SELECT | 0
